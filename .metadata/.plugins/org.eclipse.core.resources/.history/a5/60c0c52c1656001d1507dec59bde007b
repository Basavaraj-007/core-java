package datastructure;


class QueueUsingArray{
	int front_Q,rear_Q;
	int capacityOfQueue;
	static int[] q1;
	
	public QueueUsingArray(int size) {
		capacityOfQueue=size;
		q1=new int[capacityOfQueue];
	}
	
	void enqueue(int value) {
		if(rear_Q==capacityOfQueue) {
			System.out.println("Queue is already full,you cannot inseret element");
		}
		else {
			q1[rear_Q]=value;
			rear_Q++;
		}
	}
	void dequeue() {
		if(rear_Q==0) {
			System.out.println("queue is empty,there is nothing to delete");
		}
		else {
			for(int i=0;i<rear_Q-1;rear_Q++) {
				q1[i]=q1[i+1];
			}
			rear_Q--;
		}
		
	}
	void display() {
		if(rear_Q==0) {
			System.out.println("queue is empty, nothing to dispaly");
		}
		else {
			for(int i=0;i<rear_Q;i++) {
				System.out.println(q1[i]);
			}
		}
	}
}

public class QueueDsa {

	
	//its a Linear data structure
	//follows FIFO:First In First Out
	//Insertion can take place from the rear end
	//Deletion can take place from the front end
	//eg: Queue at movie ticket Counters
	//4 Major Operations :
	//-> enqueue()- used to insert element at top
	//-> dequeue()- removes the top element queue
	//->peekfirst()-to get the first element of queue
	//-> peeklast()- to get last element of queue
	// All operation works in constant time i.e.,O(1)
	
	//Appliactions:
	//1.scheduling
	//2.Maintaining playlist
	//3.interrupt handling
	
	
	
	
	
	public static void main(String[] args) {
		

	}

}
